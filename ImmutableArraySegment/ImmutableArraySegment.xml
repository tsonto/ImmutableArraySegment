<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ImmutableArraySegment</name>
    </assembly>
    <members>
        <member name="T:Tsonto.Collections.Generic.FastEqualityFunction`1">
            <summary>
            A delegate type for defining an equality comparison.
            </summary>
            <remarks>
            This is an alternative to <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> that minimizes
            copies. This can greatly improve performance for value types.
            </remarks>
            <typeparam name="T">The type of thing to compare.</typeparam>
            <param name="a">One of the elements.</param>
            <param name="b">The other element.</param>
            <returns>True if the inputs are equal according to the implementation; false otherwise.</returns>
        </member>
        <member name="T:Tsonto.Collections.Generic.ImmutableArraySegment">
            <summary>
            Provides extension methods and other static methods that work with <see cref="T:Tsonto.Collections.Generic.ImmutableArraySegment`1"/>.
            </summary>
        </member>
        <member name="M:Tsonto.Collections.Generic.ImmutableArraySegment.As``2(Tsonto.Collections.Generic.ImmutableArraySegment{``0})">
            <summary>
            Converts an <see cref="T:Tsonto.Collections.Generic.ImmutableArraySegment`1"/> of a more-derived element type to one of a less-derived
            element type.
            </summary>
            <typeparam name="TDerived">
            The element type of the original. This must be a subclass of <typeparamref name="TBase"/>.
            </typeparam>
            <typeparam name="TBase">The element type of the output.</typeparam>
            <param name="source">The input.</param>
            <returns></returns>
            <remarks>This operation has O(1) time and memory complexity.</remarks>
        </member>
        <member name="M:Tsonto.Collections.Generic.ImmutableArraySegment.Concat``1(System.Collections.Generic.IReadOnlyList{``0}[])">
            <summary>
            Combines the inputs sequentially to produce a <see cref="T:Tsonto.Collections.Generic.ImmutableArraySegment`1"/>.
            </summary>
            <typeparam name="T">The type parameter for the <see cref="T:Tsonto.Collections.Generic.ImmutableArraySegment"/> class.</typeparam>
            <param name="sources">The data to combine.</param>
            <returns>An <see cref="T:Tsonto.Collections.Generic.ImmutableArraySegment`1"/> holding the combined data from the inputs.</returns>
            <remarks>
            This operation has O(n) memory usage and O(s+n) time complexity, where n is the total length of all inputs
            and s is the number of inputs. Some special cases are O(1).
            </remarks>
        </member>
        <member name="M:Tsonto.Collections.Generic.ImmutableArraySegment.Empty``1">
            <summary>
            Gets an empty instance of <see cref="T:Tsonto.Collections.Generic.ImmutableArraySegment`1"/>.
            </summary>
            <remarks>
            When performance is more important than readability, just use
            <c>default(IImutableArraySegment&lt;Whatever&gt;)</c> instead, to avoid a copy.
            </remarks>
            <typeparam name="T">The type parameter for the <see cref="T:Tsonto.Collections.Generic.ImmutableArraySegment"/> class.</typeparam>
            <returns>An empty result.</returns>
        </member>
        <member name="M:Tsonto.Collections.Generic.ImmutableArraySegment.Join``1(``0,System.Collections.Generic.IReadOnlyList{``0}[])">
            <summary>
            Combines the inputs sequentially with a given delimiter between each source's content.
            </summary>
            <typeparam name="T">The type parameter for the <see cref="T:Tsonto.Collections.Generic.ImmutableArraySegment"/> class.</typeparam>
            <param name="delimiter">An element to place between each input source's content.</param>
            <param name="sources">The data to combine.</param>
            <returns>An <see cref="T:Tsonto.Collections.Generic.ImmutableArraySegment`1"/> holding the combined data from the inputs.</returns>
            <remarks>
            This operation has O(n) memory usage and O(s+n) time complexity, where n is the total length of all inputs
            and s is the number of inputs. Some special cases are O(1).
            </remarks>
        </member>
        <member name="M:Tsonto.Collections.Generic.ImmutableArraySegment.Join``1(System.Collections.Generic.IReadOnlyList{``0},System.Collections.Generic.IReadOnlyList{``0}[])">
            <summary>
            Combines the inputs sequentially with a given delimiter between each source's content.
            </summary>
            <typeparam name="T">The type parameter for the <see cref="T:Tsonto.Collections.Generic.ImmutableArraySegment"/> class.</typeparam>
            <param name="delimiter">A sequence of elements to place between each input source's content.</param>
            <param name="sources">The data to combine.</param>
            <returns>An <see cref="T:Tsonto.Collections.Generic.ImmutableArraySegment`1"/> holding the combined data from the inputs.</returns>
            <remarks>
            This operation has O(n + s*d) time and memory complexity, where n is the total length of all source inputs,
            s is the number of source inputs, and d is the length of the delimiter. Some special cases are O(1).
            </remarks>
        </member>
        <member name="M:Tsonto.Collections.Generic.ImmutableArraySegment.ToImmutableArraySegment``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates an <see cref="T:Tsonto.Collections.Generic.ImmutableArraySegment`1"/> from the given sequence.
            </summary>
            <typeparam name="T">The sequence's element type.</typeparam>
            <param name="source">The sequence that provides the segment's elements.</param>
            <returns>A new <see cref="T:Tsonto.Collections.Generic.ImmutableArraySegment"/> representing the same data.</returns>
            <remarks>
            This operation's performance varies by source, amd is the same as that of <see
            cref="M:Tsonto.Collections.Generic.ImmutableArraySegment`1.#ctor(System.Collections.Generic.IEnumerable{`0})"/>. See that constructor's performance
            documentation for details.
            </remarks>
        </member>
        <member name="T:Tsonto.Collections.Generic.ImmutableArraySegment`1">
            <summary>
            Provides a view into an immutable array.
            </summary>
            <typeparam name="T">The element type of the array.</typeparam>
            <remarks>
            <para>
            Objects of this type are immutable, and they guarantee that the array they point to is immutable. However (like
            other .NET array types), if the type <typeparamref name="T"/> is not immutable then the elements themselves may
            change. Example: since <c>SortedSet&lt;int&gt;</c> is mutable, for an
            <c>ImmutableArraySegment&lt;SortedSet&lt;int&gt;&gt; s</c>, <c>s[0]</c> will always refer to the same set
            object, but the contents of that object may vary over time.
            </para>
            <para>Comparison with built-int types:
            <list type="bullet">
            <item>
            This type is, in many ways, a drop-in replacement for <see cref="T:System.Collections.Immutable.ImmutableArray`1"/>. ImmutableArraySegment's
            advantages are that it provides more functionality and does much of it (such as getting array slices) faster.
            </item>
            <item>
            This type can be seen as an immutable version of <see cref="T:System.ArraySegment`1"/>, although ImmutableArraySegment
            provides more features.
            </item>
            <item></item>
            It's also somewhat similar to <see cref="T:System.ReadOnlyMemory`1"/>, but only works with managed memory. (And, of
            course, ReadOnlyMemory doesn't actually guarantee immutability, since the data it wraps could be changed by
            other code.)
            </list>
            </para>
            <para>
            This package's developers have taken care to optimize this type for performance, both in terms of speed and
            memory usage. Additionally, every method's documentation provides information about its performance
            characteristics.
            </para>
            </remarks>
        </member>
        <member name="M:Tsonto.Collections.Generic.ImmutableArraySegment`1.#ctor(System.ReadOnlySpan{`0}@)">
            <summary>
            Initializes a new instance of the <see cref="T:Tsonto.Collections.Generic.ImmutableArraySegment"/>
            </summary>
            <param name="source">The contents to copy to the array.</param>
            <remarks>This operation is O(n) for speed and memory.</remarks>
        </member>
        <member name="M:Tsonto.Collections.Generic.ImmutableArraySegment`1.#ctor(System.Span{`0}@)">
            <summary>
            Initializes a new instance of the <see cref="T:Tsonto.Collections.Generic.ImmutableArraySegment"/>
            </summary>
            <param name="source">The contents to copy to the array.</param>
            <remarks>This operation is O(n) for speed and memory.</remarks>
        </member>
        <member name="M:Tsonto.Collections.Generic.ImmutableArraySegment`1.#ctor(System.ReadOnlyMemory{`0}@)">
            <summary>
            Initializes a new instance of the <see cref="T:Tsonto.Collections.Generic.ImmutableArraySegment"/>
            </summary>
            <param name="source">The contents to copy to the array.</param>
            <remarks>This operation is O(n) for speed and memory.</remarks>
        </member>
        <member name="M:Tsonto.Collections.Generic.ImmutableArraySegment`1.#ctor(System.Memory{`0}@)">
            <summary>
            Initializes a new instance of the <see cref="T:Tsonto.Collections.Generic.ImmutableArraySegment"/>
            </summary>
            <param name="source">The contents to copy to the array.</param>
            <remarks>This operation is O(n) for speed and memory.</remarks>
        </member>
        <member name="M:Tsonto.Collections.Generic.ImmutableArraySegment`1.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:Tsonto.Collections.Generic.ImmutableArraySegment"/>
            </summary>
            <param name="source">The contents to copy to the array.</param>
            <remarks>This operation is O(n) for speed and memory.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:Tsonto.Collections.Generic.ImmutableArraySegment`1.#ctor(`0[],System.Range)">
            <summary>
            Initializes a new instance of the <see cref="T:Tsonto.Collections.Generic.ImmutableArraySegment"/>
            </summary>
            <param name="source">The contents to copy to the array.</param>
            <param name="range">The portion of the source to copy.</param>
            <remarks>This operation is O(r) for speed and memory, where r is the length of the range.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The requested range is invalid, or is invalid for the length of the source.
            </exception>
        </member>
        <member name="M:Tsonto.Collections.Generic.ImmutableArraySegment`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Tsonto.Collections.Generic.ImmutableArraySegment"/>
            </summary>
            <param name="source">The contents to copy to the array.</param>
            <remarks>
            This operation's performance varies based on the actual type of the input and which interfaces it
            implements:
            <list type="bullet">
            <item><c><typeparamref name="T"/>[]</c>: O(n)</item>
            <item><c>ImmutableArraySegment&lt; <typeparamref name="T"/>&gt;</c>: O(1)</item>
            <item>
            <c>ArraySegment&lt; <typeparamref name="T"/>&gt;</c>: O(n), where n is the length of the segment rather than
            of its backing array
            </item>
            <item><c>ICollection&lt; <typeparamref name="T"/>&gt;</c>: O(n)</item>
            <item><c>IReadOnlyList&lt; <typeparamref name="T"/>&gt;</c>: O(n)</item>
            <item>
            otherwise: same as ToArray, which is approximately O(n*log(n)); iterates through the sequence only once
            </item>
            </list>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:Tsonto.Collections.Generic.ImmutableArraySegment`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Range)">
            <summary>
            Initializes a new instance of the <see cref="T:Tsonto.Collections.Generic.ImmutableArraySegment"/>
            </summary>
            <param name="source">The contents to copy to the array.</param>
            <param name="range">The range of items from the source.</param>
            <remarks>
            This operation's performance varies based on the actual type of the input and which interfaces it
            implements. n refers to the full length of the source, r to the length of the range, and s to the start
            index of the range:
            <list type="bullet">
            <item><c><typeparamref name="T"/>[]</c>: O(r)</item>
            <item><c>ImmutableArraySegment&lt; <typeparamref name="T"/>&gt;</c>: O(1)</item>
            <item><c>ArraySegment&lt; <typeparamref name="T"/>&gt;</c>: O(r)</item>
            <item><c>ICollection&lt; <typeparamref name="T"/>&gt; with n == r</c>: O(r)</item>
            <item><c>IReadOnlyList&lt; <typeparamref name="T"/>&gt;</c>: O(n)</item>
            <item>
            <c>ICollection&lt; <typeparamref name="T"/>&gt; with n != r</c>: O(s) + O(r*log(r)); sequence is only
            enunmerated once, and not past s+r
            </item>
            <item>
            otherwise, if r is implicit in how the range was given: O(s) + O(r*log(r)); sequence is only enumerated
            once, and not past s+r
            </item>
            <item>otherwise, O(n) + O(s) + O(r*log(r)); sequence is fully enumerated and then partially enumerated</item>
            </list>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The requested range is invalid, or is invalid for the length of the source.
            </exception>
        </member>
        <member name="M:Tsonto.Collections.Generic.ImmutableArraySegment`1.#ctor(`0[],System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Tsonto.Collections.Generic.ImmutableArraySegment"/>
            </summary>
            <param name="source">The source of contents to copy to the array.</param>
            <param name="offset">How many elements from the source's start to begin copying from.</param>
            <param name="length">How many elements to copy from the source.</param>
            <remarks>
            This operation is O(r) for speed and memory, where r is the provided length rather than the length of the
            source array.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The requested range is invalid, or is invalid for the length of the source.
            </exception>
        </member>
        <member name="P:Tsonto.Collections.Generic.ImmutableArraySegment`1.Empty">
            <summary>
            Gets an empty instance of <see cref="T:Tsonto.Collections.Generic.ImmutableArraySegment`1"/>.
            </summary>
            <remarks>
            When performance is more important than readability, just use
            <c>default(IImutableArraySegment&lt;Whatever&gt;)</c> instead, to avoid a copy.
            </remarks>
            <remarks>This operation is O(1) for time and memory.</remarks>
        </member>
        <member name="P:Tsonto.Collections.Generic.ImmutableArraySegment`1.System#Collections#Generic#IReadOnlyCollection{T}#Count">
            <inheritdoc/>
        </member>
        <member name="P:Tsonto.Collections.Generic.ImmutableArraySegment`1.Length">
            <summary>
            Gets
            </summary>
            <remarks>This operation is O(1) for time and memory.</remarks>
        </member>
        <member name="P:Tsonto.Collections.Generic.ImmutableArraySegment`1.Item(System.Int32)">
            <summary>
            Gets the element at the given index.
            </summary>
            <param name="index">
            The position to read from, relative to the start of this object's view of the underlying array.
            </param>
            <returns>The element.</returns>
            <remarks>
            This operation is O(1) for time and memory. For value types, and especially large value types, you can avoid
            a copy operation by using <see cref="M:Tsonto.Collections.Generic.ImmutableArraySegment`1.ItemRef(System.Int32)"/> instead.
            </remarks>
        </member>
        <member name="P:Tsonto.Collections.Generic.ImmutableArraySegment`1.Item(System.Index)">
            <summary>
            Gets the element at the given index.
            </summary>
            <param name="index">
            The position to read from, relative to the start or end of this object's view of the underlying array.
            </param>
            <returns>The element.</returns>
            <remarks>
            This operation is O(1) for time and memory. For value types, and especially large value types, you can avoid
            a copy operation by using <see cref="M:Tsonto.Collections.Generic.ImmutableArraySegment`1.ItemRef(System.Index)"/> instead.
            </remarks>
            <exception cref="T:System.IndexOutOfRangeException">
            The specified position is beyond the array segment's bounds.
            </exception>
        </member>
        <member name="P:Tsonto.Collections.Generic.ImmutableArraySegment`1.Item(System.Range)">
            <summary>
            Gets a new <see cref="T:Tsonto.Collections.Generic.ImmutableArraySegment`1"/> representing a portion of this instance's view into the
            backing array.
            </summary>
            <param name="range">A range defining the portion of the current view that the new view should have.</param>
            <returns>A new <see cref="T:Tsonto.Collections.Generic.ImmutableArraySegment`1"/>.</returns>
            <remarks>This operation is O(1) for time and memory.</remarks>
            <exception cref="T:System.IndexOutOfRangeException">
            The start or end of the range is beyond the array segment's bounds.
            </exception>
        </member>
        <member name="M:Tsonto.Collections.Generic.ImmutableArraySegment`1.System#Collections#Immutable#IImmutableList{T}#Add(`0)">
            <inheritdoc/>
        </member>
        <member name="M:Tsonto.Collections.Generic.ImmutableArraySegment`1.System#Collections#Immutable#IImmutableList{T}#AddRange(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Tsonto.Collections.Generic.ImmutableArraySegment`1.Append(`0)">
            <summary>
            Creates a new <see cref="T:Tsonto.Collections.Generic.ImmutableArraySegment`1"/> that's the same as this one except with a specified
            element appended.
            </summary>
            <param name="value">The new element.</param>
            <returns>A new <see cref="T:Tsonto.Collections.Generic.ImmutableArraySegment`1"/>.</returns>
            <remarks>This operation is O(n) for time and memory, where n is this segment's length.</remarks>
        </member>
        <member name="M:Tsonto.Collections.Generic.ImmutableArraySegment`1.Append(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates a new <see cref="T:Tsonto.Collections.Generic.ImmutableArraySegment`1"/> that's the same as this one except with a specified
            elements appended.
            </summary>
            <param name="items">The new elements.</param>
            <returns>A new <see cref="T:Tsonto.Collections.Generic.ImmutableArraySegment`1"/>.</returns>
            <remarks>
            This operation's time and memory characteristics are O(n), where n is the combined length of the output. The
            copy operation is done efficiently if the actual type of the <paramref name="items"/> input is <c>T[]</c>,
            <c>ImmutableArraySegment&lt;T&gt;</c>, or <c>ArraySegment&lt;T&gt;</c>, or implements
            <c>IReadOnlyList&lt;T&gt;</c> or <c>ICollection&lt;T&gt;</c>. Otherwise, the copy is somewhat less
            efficient, and iterates over the enumerable twice.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The length of the enumerated sequence differs when run the first time vs. the second time.
            </exception>
        </member>
        <member name="M:Tsonto.Collections.Generic.ImmutableArraySegment`1.Append(System.ReadOnlyMemory{`0}@)">
            <summary>
            Creates a new <see cref="T:Tsonto.Collections.Generic.ImmutableArraySegment`1"/> that's the same as this one except with a specified
            elements appended.
            </summary>
            <param name="items">The new elements.</param>
            <returns>A new <see cref="T:Tsonto.Collections.Generic.ImmutableArraySegment`1"/>.</returns>
            <remarks>This operation is O(n) for time and memory, where n is the combined length.</remarks>
        </member>
        <member name="M:Tsonto.Collections.Generic.ImmutableArraySegment`1.Append(System.Memory{`0}@)">
            <summary>
            Creates a new <see cref="T:Tsonto.Collections.Generic.ImmutableArraySegment`1"/> that's the same as this one except with a specified
            elements appended.
            </summary>
            <param name="items">The new elements.</param>
            <returns>A new <see cref="T:Tsonto.Collections.Generic.ImmutableArraySegment`1"/>.</returns>
            <remarks>This operation is O(n) for time and memory, where n is the combined length.</remarks>
        </member>
        <member name="M:Tsonto.Collections.Generic.ImmutableArraySegment`1.Append(System.ReadOnlySpan{`0}@)">
            <summary>
            Creates a new <see cref="T:Tsonto.Collections.Generic.ImmutableArraySegment`1"/> that's the same as this one except with a specified
            elements appended.
            </summary>
            <param name="items">The new elements.</param>
            <returns>A new <see cref="T:Tsonto.Collections.Generic.ImmutableArraySegment`1"/>.</returns>
            <remarks>This operation is O(n) for time and memory, where n is the combined length.</remarks>
        </member>
        <member name="M:Tsonto.Collections.Generic.ImmutableArraySegment`1.Append(System.Span{`0}@)">
            <summary>
            Creates a new <see cref="T:Tsonto.Collections.Generic.ImmutableArraySegment`1"/> that's the same as this one except with a specified
            elements appended.
            </summary>
            <param name="items">The new elements.</param>
            <returns>A new <see cref="T:Tsonto.Collections.Generic.ImmutableArraySegment`1"/>.</returns>
            <remarks>This operation is O(n) for time and memory, where n is the combined length.</remarks>
        </member>
        <member name="M:Tsonto.Collections.Generic.ImmutableArraySegment`1.System#Collections#Immutable#IImmutableList{T}#Clear">
            <inheritdoc/>
        </member>
        <member name="M:Tsonto.Collections.Generic.ImmutableArraySegment`1.CopyTo(`0[],System.Int32,System.Int32)">
            <summary>
            Copies the array segment's elements to the given array.
            </summary>
            <param name="dest">The array to copy to.</param>
            <param name="destOffset">The position in the destination array to start the copy at.</param>
            <param name="length">The number of elements to copy.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The given offset and length exceed the bounds of the source and/or the destination.
            </exception>
            <remarks>This operation is O(n) for time and memory, where n is length copied.</remarks>
        </member>
        <member name="M:Tsonto.Collections.Generic.ImmutableArraySegment`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the array segment's elements to the given array.
            </summary>
            <param name="dest">The array to copy to.</param>
            <param name="destOffset">The position in the destination array to start the copy at.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The given offset and the source's length exceed the bounds of the source and/or the destination.
            </exception>
            <remarks>This operation is O(n) for time and memory, where n is source's length.</remarks>
        </member>
        <member name="M:Tsonto.Collections.Generic.ImmutableArraySegment`1.CopyTo(System.Span{`0}@,System.Int32,System.Int32)">
            <summary>
            Copies the array segment's elements to the given array.
            </summary>
            <param name="dest">The array to copy to.</param>
            <param name="destOffset">The position in the destination array to start the copy at.</param>
            <param name="length">The number of elements to copy.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The given offset and length exceed the bounds of the source and/or the destination.
            </exception>
            <remarks>This operation is O(n) for time and memory, where n is length copied.</remarks>
        </member>
        <member name="M:Tsonto.Collections.Generic.ImmutableArraySegment`1.CopyTo(System.Span{`0}@,System.Int32)">
            <summary>
            Copies the array segment's elements to the given array.
            </summary>
            <param name="dest">The array to copy to.</param>
            <param name="destOffset">The position in the destination array to start the copy at.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The given offset and the source's length exceed the bounds of the source and/or the destination.
            </exception>
            <remarks>This operation is O(n) for time and memory, where n the source's length.</remarks>
        </member>
        <member name="M:Tsonto.Collections.Generic.ImmutableArraySegment`1.CopyTo(System.Memory{`0}@,System.Int32,System.Int32)">
            <summary>
            Copies the array segment's elements to the given array.
            </summary>
            <param name="dest">The array to copy to.</param>
            <param name="destOffset">The position in the destination array to start the copy at.</param>
            <param name="length">The number of elements to copy.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The given offset and length exceed the bounds of the source and/or the destination.
            </exception>
            <remarks>This operation is O(n) for time and memory, where n is length copied.</remarks>
        </member>
        <member name="M:Tsonto.Collections.Generic.ImmutableArraySegment`1.CopyTo(System.Memory{`0}@,System.Int32)">
            <summary>
            Copies the array segment's elements to the given array.
            </summary>
            <param name="dest">The array to copy to.</param>
            <param name="destOffset">The position in the destination array to start the copy at.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The given offset and the source's length exceed the bounds of the source and/or the destination.
            </exception>
            <remarks>This operation is O(n) for time and memory, where n is the source's length.</remarks>
        </member>
        <member name="M:Tsonto.Collections.Generic.ImmutableArraySegment`1.GetEnumerator">
            <summary>
            Gets an enumerator for iterating over the segment's elements.
            </summary>
            <returns>An enumerator.</returns>
        </member>
        <member name="M:Tsonto.Collections.Generic.ImmutableArraySegment`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Tsonto.Collections.Generic.ImmutableArraySegment`1.IndexOf(`0)">
            <summary>
            Finds the position of the first occurence of the given element in the array segment.
            </summary>
            <param name="item">The element to search for.</param>
            <returns>
            The number of elements from the beginning of the segment that the element was found at, or -1 if the element
            was not found.
            </returns>
            <remarks>This operation is O(n) for time and O(1) for memory, where n is the source's length.</remarks>
        </member>
        <member name="M:Tsonto.Collections.Generic.ImmutableArraySegment`1.IndexOf(`0@,System.Int32)">
            <summary>
            Finds the position of the first occurence of the given element in the array segment.
            </summary>
            <param name="item">The element to search for.</param>
            <param name="index">The position to start the search from. 0 is the start of the array segment.</param>
            <returns>
            The number of elements from the beginning of the segment that the element was found at, or -1 if the element
            was not found.
            </returns>
            <remarks>This operation is O(n) for time and O(1) for memory, where n is the search length.</remarks>
        </member>
        <member name="M:Tsonto.Collections.Generic.ImmutableArraySegment`1.IndexOf(`0,System.Int32,System.Int32)">
            <summary>
            Finds the position of the first occurence of the given element in the array segment.
            </summary>
            <param name="item">The element to search for.</param>
            <param name="index">The position to start the search from. 0 is the start of the array segment.</param>
            <param name="count">How many elements to search.</param>
            <returns>
            The number of elements from the beginning of the segment that the element was found at, or -1 if the element
            was not found.
            </returns>
            <remarks>This operation is O(n) for time and O(1) for memory, where n is the search length.</remarks>
        </member>
        <member name="M:Tsonto.Collections.Generic.ImmutableArraySegment`1.IndexOf(`0,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Finds the position of the first occurence of the given element in the array segment.
            </summary>
            <param name="item">The element to search for.</param>
            <param name="equalityComparer">
            The equality comparer to use for testing whether a given element is a match.
            </param>
            <returns>
            The number of elements from the beginning of the segment that the element was found at, or -1 if the element
            was not found.
            </returns>
            <remarks>
            This operation is O(n) for time and O(1) for memory, where n is the segment's length. If <typeparamref
            name="T"/> is a value type, especially a large one, <see cref="M:Tsonto.Collections.Generic.ImmutableArraySegment`1.IndexOf(`0@,Tsonto.Collections.Generic.FastEqualityFunction{`0})"/> may
            be one or more orders of magnitude faster.
            </remarks>
        </member>
        <member name="M:Tsonto.Collections.Generic.ImmutableArraySegment`1.IndexOf(`0,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Finds the position of the first occurence of the given element in the array segment.
            </summary>
            <param name="item">The element to search for.</param>
            <param name="index">The position to start the search from. 0 is the start of the array segment.</param>
            <param name="equalityComparer">
            The equality comparer to use for testing whether a given element is a match.
            </param>
            <returns>
            The number of elements from the beginning of the segment that the element was found at, or -1 if the element
            was not found.
            </returns>
            <remarks>
            This operation is O(n) for time and O(1) for memory, where n is the search length. If <typeparamref
            name="T"/> is a value type, especially a large one, <see cref="M:Tsonto.Collections.Generic.ImmutableArraySegment`1.IndexOf(`0@,System.Int32,Tsonto.Collections.Generic.FastEqualityFunction{`0})"/> may be one or more orders of magnitude faster.
            </remarks>
        </member>
        <member name="M:Tsonto.Collections.Generic.ImmutableArraySegment`1.IndexOf(`0@,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Finds the position of the first occurence of the given element in the array segment.
            </summary>
            <param name="item">The element to search for.</param>
            <param name="index">The position to start the search from. 0 is the start of the array segment.</param>
            <param name="count">How many elements to search.</param>
            <param name="equalityComparer">
            The equality comparer to use for testing whether a given element is a match.
            </param>
            <returns>
            The number of elements from the beginning of the segment that the element was found at, or -1 if the element
            was not found.
            </returns>
            <remarks>
            This operation is O(n) for time and O(1) for memory, where n is the search length. If <typeparamref
            name="T"/> is a value type, especially a large one, <see cref="M:Tsonto.Collections.Generic.ImmutableArraySegment`1.IndexOf(`0@,System.Int32,System.Int32,Tsonto.Collections.Generic.FastEqualityFunction{`0})"/> may be one or more orders of magnitude faster.
            </remarks>
        </member>
        <member name="M:Tsonto.Collections.Generic.ImmutableArraySegment`1.IndexOf(`0@,Tsonto.Collections.Generic.FastEqualityFunction{`0})">
            <summary>
            Finds the position of the first occurence of the given element in the array segment.
            </summary>
            <param name="item">The element to search for.</param>
            <param name="areEqual">A function to determine whether two elements should be considered a match.</param>
            <returns>
            The number of elements from the beginning of the segment that the element was found at, or -1 if the element
            was not found.
            </returns>
            <remarks>This operation is O(n) for time and O(1) for memory, where n is the segment's length.</remarks>
        </member>
        <member name="M:Tsonto.Collections.Generic.ImmutableArraySegment`1.IndexOf(`0@,System.Int32,Tsonto.Collections.Generic.FastEqualityFunction{`0})">
            <summary>
            Finds the position of the first occurence of the given element in the array segment.
            </summary>
            <param name="item">The element to search for.</param>
            <param name="index">The position to start the search from. 0 is the start of the array segment.</param>
            <param name="areEqual">A function to determine whether two elements should be considered a match.</param>
            <returns>
            The number of elements from the beginning of the segment that the element was found at, or -1 if the element
            was not found.
            </returns>
            <remarks>This operation is O(n) for time and O(1) for memory, where n is the search length.</remarks>
        </member>
        <member name="M:Tsonto.Collections.Generic.ImmutableArraySegment`1.IndexOf(`0@,System.Int32,System.Int32,Tsonto.Collections.Generic.FastEqualityFunction{`0})">
            <summary>
            Finds the position of the first occurence of the given element in the array segment.
            </summary>
            <param name="item">The element to search for.</param>
            <param name="index">The position to start the search from. 0 is the start of the array segment.</param>
            <param name="count">How many elements to search.</param>
            <param name="areEqual">A function to determine whether two elements should be considered a match.</param>
            <returns>
            The number of elements from the beginning of the segment that the element was found at, or -1 if the element
            was not found.
            </returns>
            <remarks>This operation is O(n) for time and O(1) for memory, where n is the search length.</remarks>
        </member>
        <member name="M:Tsonto.Collections.Generic.ImmutableArraySegment`1.System#Collections#Immutable#IImmutableList{T}#IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Tsonto.Collections.Generic.ImmutableArraySegment`1.Insert(System.Index,`0@)">
            <summary>
            Produces a new <see cref="T:Tsonto.Collections.Generic.ImmutableArraySegment`1"/> that is like the current one except with content
            inserted somewhere within it.
            </summary>
            <param name="index">The location to insert the content at.</param>
            <param name="element">The content to insert.</param>
            <returns>The new <see cref="T:Tsonto.Collections.Generic.ImmutableArraySegment`1"/>.</returns>
            <remarks>This operation is O(n) for time and memory, where n is the combined length.</remarks>
        </member>
        <member name="M:Tsonto.Collections.Generic.ImmutableArraySegment`1.System#Collections#Immutable#IImmutableList{T}#Insert(System.Int32,`0)">
            <inheritdoc/>
        </member>
        <member name="M:Tsonto.Collections.Generic.ImmutableArraySegment`1.Insert(System.Index,`0[])">
            <summary>
            Produces a new <see cref="T:Tsonto.Collections.Generic.ImmutableArraySegment`1"/> that is like the current one except with content
            inserted somewhere within it.
            </summary>
            <param name="index">The location to insert the content at.</param>
            <param name="items">The content to insert.</param>
            <returns>The new <see cref="T:Tsonto.Collections.Generic.ImmutableArraySegment`1"/>.</returns>
            <remarks>
            This operation's time and memory characteristics are O(n), where n is the combined length of the output. The
            copy operation is done efficiently if the actual type of the <paramref name="items"/> input is <c>T[]</c>,
            <c>ImmutableArraySegment&lt;T&gt;</c>, or <c>ArraySegment&lt;T&gt;</c>, or implements
            <c>IReadOnlyList&lt;T&gt;</c> or <c>ICollection&lt;T&gt;</c>. Otherwise, the copy is somewhat less
            efficient, and iterates over the enumerable twice.
            </remarks>
        </member>
        <member name="M:Tsonto.Collections.Generic.ImmutableArraySegment`1.Insert(System.Index,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Produces a new <see cref="T:Tsonto.Collections.Generic.ImmutableArraySegment`1"/> that is like the current one except with content
            inserted somewhere within it.
            </summary>
            <param name="index">The location to insert the content at.</param>
            <param name="items">The content to insert.</param>
            <returns>The new <see cref="T:Tsonto.Collections.Generic.ImmutableArraySegment`1"/>.</returns>
            <remarks>
            This operation's time and memory characteristics are O(n), where n is the combined length of the output. The
            copy operation is done efficiently if the actual type of the <paramref name="items"/> input is <c>T[]</c>,
            <c>ImmutableArraySegment&lt;T&gt;</c>, or <c>ArraySegment&lt;T&gt;</c>, or implements
            <c>IReadOnlyList&lt;T&gt;</c> or <c>ICollection&lt;T&gt;</c>. Otherwise, the copy is somewhat less
            efficient, and iterates over the enumerable twice.
            </remarks>
        </member>
        <member name="M:Tsonto.Collections.Generic.ImmutableArraySegment`1.Insert(System.Index,System.ReadOnlySpan{`0}@)">
            <summary>
            Produces a new <see cref="T:Tsonto.Collections.Generic.ImmutableArraySegment`1"/> that is like the current one except with content
            inserted somewhere within it.
            </summary>
            <param name="index">The location to insert the content at.</param>
            <param name="items">The content to insert.</param>
            <returns>The new <see cref="T:Tsonto.Collections.Generic.ImmutableArraySegment`1"/>.</returns>
            <remarks>This operation is O(n) for time and memory, where n is the combined length.</remarks>
        </member>
        <member name="M:Tsonto.Collections.Generic.ImmutableArraySegment`1.Insert(System.Index,System.Span{`0}@)">
            <summary>
            Produces a new <see cref="T:Tsonto.Collections.Generic.ImmutableArraySegment`1"/> that is like the current one except with content
            inserted somewhere within it.
            </summary>
            <param name="index">The location to insert the content at.</param>
            <param name="items">The content to insert.</param>
            <returns>The new <see cref="T:Tsonto.Collections.Generic.ImmutableArraySegment`1"/>.</returns>
            <remarks>This operation is O(n) for time and memory, where n is the combined length.</remarks>
        </member>
        <member name="M:Tsonto.Collections.Generic.ImmutableArraySegment`1.Insert(System.Index,System.ReadOnlyMemory{`0}@)">
            <summary>
            Produces a new <see cref="T:Tsonto.Collections.Generic.ImmutableArraySegment`1"/> that is like the current one except with content
            inserted somewhere within it.
            </summary>
            <param name="index">The location to insert the content at.</param>
            <param name="items">The content to insert.</param>
            <returns>The new <see cref="T:Tsonto.Collections.Generic.ImmutableArraySegment`1"/>.</returns>
            <remarks>This operation is O(n) for time and memory, where n is the combined length.</remarks>
        </member>
        <member name="M:Tsonto.Collections.Generic.ImmutableArraySegment`1.Insert(System.Index,System.Memory{`0}@)">
            <summary>
            Produces a new <see cref="T:Tsonto.Collections.Generic.ImmutableArraySegment`1"/> that is like the current one except with content
            inserted somewhere within it.
            </summary>
            <param name="index">The location to insert the content at.</param>
            <param name="items">The content to insert.</param>
            <returns>The new <see cref="T:Tsonto.Collections.Generic.ImmutableArraySegment`1"/>.</returns>
            <remarks>This operation is O(n) for time and memory, where n is the combined length.</remarks>
        </member>
        <member name="M:Tsonto.Collections.Generic.ImmutableArraySegment`1.System#Collections#Immutable#IImmutableList{T}#InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Tsonto.Collections.Generic.ImmutableArraySegment`1.ItemRef(System.Int32)">
            <summary>
            Gets the element at the given index by reference.
            </summary>
            <param name="index">
            The position to read from, relative to the start of this object's view of the underlying array.
            </param>
            <returns>The element.</returns>
            <remarks>This operation is O(1) for time and consumes no memory.</remarks>
            <exception cref="T:System.IndexOutOfRangeException">
            The specified position is beyond the array segment's bounds.
            </exception>
        </member>
        <member name="M:Tsonto.Collections.Generic.ImmutableArraySegment`1.ItemRef(System.Index)">
            <summary>
            Gets the element at the given index by reference.
            </summary>
            <param name="index">
            The position to read from, relative to the start or end of this object's view of the underlying array.
            </param>
            <returns>The element.</returns>
            <remarks>This operation is O(1) for time and consumes no memory.</remarks>
            <exception cref="T:System.IndexOutOfRangeException">
            The specified position is beyond the array segment's bounds.
            </exception>
        </member>
        <member name="M:Tsonto.Collections.Generic.ImmutableArraySegment`1.Prepend(`0)">
            <summary>
            Creates a new <see cref="T:Tsonto.Collections.Generic.ImmutableArraySegment`1"/> that's the same as this one except with a specified
            element prepended.
            </summary>
            <param name="value">The new element.</param>
            <returns>A new <see cref="T:Tsonto.Collections.Generic.ImmutableArraySegment`1"/>.</returns>
            <remarks>This operation is O(n) for time and memory, where n is this segment's length.</remarks>
        </member>
        <member name="M:Tsonto.Collections.Generic.ImmutableArraySegment`1.System#Collections#Immutable#IImmutableList{T}#Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Tsonto.Collections.Generic.ImmutableArraySegment`1.RemoveAll(System.Predicate{`0})">
            <summary>
            Produces a new <see cref="T:Tsonto.Collections.Generic.ImmutableArraySegment`1"/> that's like the current one except with certain
            elements removed.
            </summary>
            <param name="match">
            A condition to apply to the source elements. If the condition evaluates to true, the element will be omitted
            from the output.
            </param>
            <returns>The new <see cref="T:Tsonto.Collections.Generic.ImmutableArraySegment`1"/>.</returns>
            <remarks>
            This operation is O(n) for time and memory, where n is this segment's length. Time complexity is modified by
            the performance of the predicate. If <typeparamref name="T"/> is a value type, this method will involve
            numerous copy operations, which may be detrimental to performance.
            </remarks>
        </member>
        <member name="M:Tsonto.Collections.Generic.ImmutableArraySegment`1.System#Collections#Immutable#IImmutableList{T}#RemoveAll(System.Predicate{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Tsonto.Collections.Generic.ImmutableArraySegment`1.System#Collections#Immutable#IImmutableList{T}#RemoveAt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Tsonto.Collections.Generic.ImmutableArraySegment`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Tsonto.Collections.Generic.ImmutableArraySegment`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Tsonto.Collections.Generic.ImmutableArraySegment`1.System#Collections#Immutable#IImmutableList{T}#Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Tsonto.Collections.Generic.ImmutableArraySegment`1.SequenceEquals(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether the segment's elements match the elements of a given sequence, using the default equality
            comparer.
            </summary>
            <param name="other">The sequence to compare with.</param>
            <returns>True if the sequences are equal; false otherwise.</returns>
            <remarks>
            This method has O(n) time complexity and O(1) memory complexity, where n is the length of the shorter
            sequence. If the input implements either <c>IReadOnlyCollection&lt;T&gt;</c> or <c>ICollection</c>, the
            method can use an O(1) shortcut if the sequence lengths differ. The enumeration is only iterated over once.
            If <typeparamref name="T"/> is a value type, this method will involve many copy operations, which may be
            detrimental to performance.
            </remarks>
        </member>
        <member name="M:Tsonto.Collections.Generic.ImmutableArraySegment`1.SequenceEquals(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Determines whether the segment's elements match the elements of a given sequence, using the given equality
            comparer.
            </summary>
            <param name="other">The sequence to compare with.</param>
            <param name="equalityComparer">
            The equality comparer to use for determining whether two elements are equal.
            </param>
            <returns>True if the sequences are equal; false otherwise.</returns>
            <remarks>
            This method has O(n) time complexity and O(1) memory complexity, where n is the length of the shorter
            sequence. If the input implements either <c>IReadOnlyCollection&lt;T&gt;</c> or <c>ICollection</c>, the
            method can use an O(1) shortcut if the sequence lengths differ. The enumeration is only iterated over once.
            If <typeparamref name="T"/> is a value type, this method will involve many copy operations, which may be
            detrimental to performance.
            </remarks>
        </member>
        <member name="M:Tsonto.Collections.Generic.ImmutableArraySegment`1.SequenceEquals(Tsonto.Collections.Generic.ImmutableArraySegment{`0})">
            <summary>
            Determines whether the segment's elements match the elements of a given sequence, using the default equality
            comparer.
            </summary>
            <param name="other">The sequence to compare with.</param>
            <returns>True if the sequences are equal; false otherwise.</returns>
            <remarks>
            This method has O(n) time complexity and O(1) memory complexity, where n is the length of the shorter
            sequence. The method uses an O(1) shortcut if the sequence lengths differ. If <typeparamref name="T"/> is a
            value type, this method will involve many copy operations, which may be detrimental to performance.
            </remarks>
        </member>
        <member name="M:Tsonto.Collections.Generic.ImmutableArraySegment`1.SequenceEquals(Tsonto.Collections.Generic.ImmutableArraySegment{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Determines whether the segment's elements match the elements of a given sequence, using the given equality
            comparer.
            </summary>
            <param name="other">The sequence to compare with.</param>
            <param name="equalityComparer">
            The equality comparer to use for determining whether two elements are equal.
            </param>
            <returns>True if the sequences are equal; false otherwise.</returns>
            <remarks>
            This method has O(n) time complexity and O(1) memory complexity, where n is the length of the shorter
            sequence. The method uses an O(1) shortcut if the sequence lengths differ. If <typeparamref name="T"/> is a
            value type, this method will involve many copy operations, which may be detrimental to performance.
            </remarks>
        </member>
        <member name="M:Tsonto.Collections.Generic.ImmutableArraySegment`1.SequenceEquals(System.Collections.Generic.IReadOnlyList{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Determines whether the segment's elements match the elements of a given sequence, using the given equality
            comparer.
            </summary>
            <param name="other">The sequence to compare with.</param>
            <param name="equalityComparer">
            The equality comparer to use for determining whether two elements are equal.
            </param>
            <returns>True if the sequences are equal; false otherwise.</returns>
            <remarks>
            This method has O(n) time complexity and O(1) memory complexity, where n is the length of the shorter
            sequence. The method uses an O(1) shortcut if the sequence lengths differ. If <typeparamref name="T"/> is a
            value type, this method will involve many copy operations, which may be detrimental to performance.
            </remarks>
        </member>
        <member name="M:Tsonto.Collections.Generic.ImmutableArraySegment`1.System#Collections#Immutable#IImmutableList{T}#SetItem(System.Int32,`0)">
            <inheritdoc/>
        </member>
        <member name="M:Tsonto.Collections.Generic.ImmutableArraySegment`1.Slice(System.Int32,System.Int32)">
            <summary>
            Gets a new <see cref="T:Tsonto.Collections.Generic.ImmutableArraySegment`1"/> representing a portion of this instance's view into the
            backing array.
            </summary>
            <param name="offset">The starting point of the range.</param>
            <param name="length">The length of the range.</param>
            <returns>A new <see cref="T:Tsonto.Collections.Generic.ImmutableArraySegment`1"/>.</returns>
            <remarks>This operation is O(1) for time and memory.</remarks>
            <exception cref="T:System.IndexOutOfRangeException">
            The start or end of the range is beyond the array segment's bounds.
            </exception>
        </member>
        <member name="M:Tsonto.Collections.Generic.ImmutableArraySegment`1.Slice(System.Int32)">
            <summary>
            Gets a new <see cref="T:Tsonto.Collections.Generic.ImmutableArraySegment`1"/> representing a portion of this instance's view into the
            backing array.
            </summary>
            <param name="offset">The starting point of the range.</param>
            <returns>A new <see cref="T:Tsonto.Collections.Generic.ImmutableArraySegment`1"/>.</returns>
            <remarks>This operation is O(1) for time and memory.</remarks>
            <exception cref="T:System.IndexOutOfRangeException">
            The start of the range is beyond the array segment's bounds.
            </exception>
        </member>
        <member name="M:Tsonto.Collections.Generic.ImmutableArraySegment`1.ToArray">
            <summary>
            Copies the elements to an array.
            </summary>
            <returns>The array.</returns>
            <remarks>This operation is O(1) for time and memory.</remarks>
        </member>
        <member name="M:Tsonto.Collections.Generic.ImmutableArraySegment`1.ToString">
            <inheritdoc/>
        </member>
    </members>
</doc>
